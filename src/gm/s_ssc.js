let commonRow = {
  // 名字
  n: '',
  // ????
  ncls: '',
  // 类型
  t: 'number',
  // 最小值
  min: 0,
  // 最大值
  max: 9,
  // length of number, ex. 1 => 01
  l: 1,
  // 至多可以选择多少个号码selected length
  sl: 0,
  // last selected item
  lsv: null,
  // 结构
  struct: '',
  // 按钮
  btns: ['全', '大', '小', '奇', '偶', '清'],
  // 待生成
  // values
  vs: null,
  // 所选的号的值v集
  vc: [],
  // 所选的号的名n集
  nc: [],
  // 所选的号的行名n集
  rnc: [],
}


let getCommonRow = (args = {}) => {
  return Object.assign({}, commonRow, args)
}

export default {
  /*
  所有参数集：{
    // 号码集
    ns,
    // 号码集长度集
    nsl, [4, 4]
    // 位置集
    ps,
    // 位置集长度
    psl
    // 输入值
    value
    // 重号数量 [4,5,6]
    r 3
  }
   */
  /* ===========================================================================时时彩============================================================================================== */

  /* *************************************五星*********************************** */
  /* ..............五星直选............... */
  /*
  直选复式
  N1*N2*N3*N4*N5
   */
  '377:1' () {
    return  [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
   },

  /*
  直选单式
  N
   */
  '377:0' () {
  },

  /*
  直选组合
  5*N1*N2*N3*N4*N5
   */
  '380:1' () {
    return  [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
  },

  /* ..............五星组选............... */
  /*
  组选120 WXZUS  12 14
  C(n,5)
   */
  '543:1' () {
    return  [
      getCommonRow({n: '组选120'}),
    ]
  },

  /*
  组选60
  C(m,1)*C(n,3)-C(h,1)*C(n-1,2)
  m二重号选择的个数，n单号选择的个数，h二重号和单号重复号码的个数 m>=1,n>=3
   */
  '544:1' () {
    return  [
      getCommonRow({n: '二重号'}),
      getCommonRow({n: '单号'}),
    ]
  },

  /*
  组选30
  C(m,2)*C(n,1)-C(h,2)*C(2,1)-C(h,1)*C(m-h,1)
  m二重号选择的个数，n单号选择的个数，h二重号和单号重复号码的个数m>=2, n>=1
   */
  '1110:1' () {
    return  [
      getCommonRow({n: '二重号'}),
      getCommonRow({n: '单号'}),
    ]
  },

  /*
  组选20
  C(m,1)*C(n,2)-C(h,1)*C(n-1,1)
  m三重号选择的个数，n单号选择的个数，h三重号和单号重复号码的个数m>=1,n>=2
   */
  '546:1' () {
    return  [
      getCommonRow({n: '三重号'}),
      getCommonRow({n: '单号'}),
    ]
  },

  /*
  组选10
  C(m,1)*C(n,1)-C(h,1)
  m三重号选择的个数，n二重号选择的个数，h三重号和二重号重复号码的个数m>=1,n>=1
   */
  '547:1' () {
    return  [
      getCommonRow({n: '三重号'}),
      getCommonRow({n: '二重号'}),
    ]
  },

  /*
  组选5
  C(m,1)*C(n,1)-C(h,1)
  m四重号选择的个数，n单号选择的个数，h四重号和单号重复号码的个数m>=1,n>=1
   */
  '548:1' () {
    return  [
      getCommonRow({n: '四重号'}),
      getCommonRow({n: '单号'}),
    ]
  },

  /* ..............五星特殊............... */

  /*
  五星特殊  一帆风顺  C(n,1)  n选择的号码个数 n>=1
  好事成双  C(n,1)  n选择的号码个数n>=1
  三星报喜  C(n,1)  n选择的号码个数n>=1
  四季发财  C(n,1)  n选择的号码个数n>=1
   */
  '550:1' () {
    return  [
      getCommonRow({n: '一帆风顺'}),
    ]
  },
  /*
  好事成双  C(n,1)  n选择的号码个数n>=1
   */
  '551:1' () {
    return [
      getCommonRow({n: '好事成双'}),
    ]
  },
   /*
  三星报喜  C(n,1)  n选择的号码个数n>=1
   */
  '552:1' () {
    return [
      getCommonRow({n: '三星报喜'}),
    ]
  },
  /*
  四季发财  C(n,1)  n选择的号码个数n>=1
   */
  '553:1' () {
    return [
      getCommonRow({n: '四季发财'}),
    ]
  },

  /* *************************************四星*********************************** */
  /* ..............前四直选............... */
  /*
  直选复式
  N1*N2*N3*N4 N1千，N2百，N3十，N4个
   */
  '1121:1' () {
    return  [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
    ]
  },

  /*
  直选单式
  N N=输入的号码个数
   */
  '1121:0' () {
  },

  /*
  直选组合
  (N1*N2*N3*N4)*4 N1千，N2百，N3十，N4个n>=1
  */
  '1122:1' () {
    return  [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
    ]
  },

  /* ..............前四组选............... */
  /*
  组选24
  C(n,4)  n选择的号码个数 n>=4
  */
  '1123:1' () {
    return  [
      getCommonRow({n: '组选24'}),
    ]
  },

  /*
  组选12
  C(m,1)*C(n,2)-C(h,1)*C(n-1,1) m二重号选择的个数，n单号选择的个数，h二重号和单号重复号码的个数 m>=1,n>=2
  */
  '1124:1' () {
    return  [
      getCommonRow({n: '二重号'}),
      getCommonRow({n: '单号'}),
    ]
  },

  /*
  组选6
  C(n,2)  n>=2
  */
  '1125:1' () {
    return  [
      getCommonRow({n: '二重号'}),
    ]
  },

   /*
  组选4
  C(m,1)*C(n,1)-C(h,1)  m三重号选择的个数，n单号选择的个数，h三重号和单号重复号码的个数m>=1,n>=1
  */
  '1126:1' () {
    return  [
      getCommonRow({n: '三重号'}),
      getCommonRow({n: '单号'}),
    ]
  },

  /* ..............后四直选............... */
  /*
  直选复式
  同前四 同前四
  */
  '382:1' () {
    return  [
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
  },

  /*
  直选单式
  同前四 同前四
  */
  '382:0' () {
  },

  /*
  直选组合
  同前四 同前四
  */
  '384:1' () {
    return  [
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
  },

  /* ..............后四组选............... */
  /*
  组选24
  同前四 同前四
  */
  '555:1' () {
    return  [
      getCommonRow({n: '组选24'}),
    ]
  },

  /*
  组选12
  同前四 同前四
  */
  '556:1' () {
    return  [
      getCommonRow({n: '二重号'}),
      getCommonRow({n: '单号'}),
    ]
  },

  /*
  组选6
  同前四 同前四
  */
  '557:1' () {
    return  [
      getCommonRow({n: '二重号'}),
    ]
  },

  /*
  组选4
  同前四 同前四
  */
  '558:1' () {
    return  [
      getCommonRow({n: '三重号'}),
      getCommonRow({n: '单号'}),
    ]
  },

  /* *************************************前三*********************************** */
  /* ..............前三直选............... */
  /*
  直选复式
  N1 * N2 * N3
  */
  '14:1' () {
    return  [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
    ]
  },

  /*
  直选单式
  N
  */
  '14:0' () {
  },

  /*
  直选和值
  分别对应各个和值数字，0-27 0:1, 1:3, 2:6, 3:10, 4:15, 5:21, 6:28, 7:36, 8:45, 9:55, 10:63, 11:69, 12:73, 13:75, 14:75, 15:73, 16:69, 17:63, 18:55, 19:45, 20:36, 21:28, 22:21, 23:15, 24:10, 25:6, 26:3, 27:1
  */
  '15:1' () {
    return  [
      getCommonRow({n: '和值', min: 0, max: 27}),
    ]
  },

  /*
  直选跨度
  分别对应各个跨度数值0-9 0:10, 1:54, 2:96, 3:126, 4:144, 5:150, 6:144, 7:126, 8:96, 9:54
  */
  '578:1' () {
    return  [
      getCommonRow({n: '跨度'}),
    ]
  },

  /* ..............前三组选............... */
  /*
  组三复式
  N=选择号码个数 n>=2 C(n, 2) * 2
  */
  '18:1' () {
    return  [
      getCommonRow({n: '组三'}),
    ]
  },

  /*
  组三单式
  N=输入的号码个数 N
  */
  '18:0' () {
  },

  /*
  组六复式
  N=选择号码个数 n>=3 C(n, 3)
  */
  '19:1' () {
    return  [
      getCommonRow({n: '组六'}),
    ]
  },

  /*
  组六单式
  N=输入的号码个数 N
  */
  '19:0' () {
  },

  /*
  混合组选
  N=输入的号码个数 N
  */
  '20:0' () {
  },

  /* ..............前三其他............... */
  /*
  组选和值(不含豹子号) 分别对应各个和值数字，0-26 1:1, 2:2, 3:2, 4:4, 5:5, 6:6, 7:8, 8:10, 9:11, 10:13, 11:14, 12:14, 13:15, 14:15, 15:14, 16:14, 17:13, 18:11, 19:10, 20:8, 21:6, 22:5, 23:4, 24:2, 25:2, 26:1
  */
  '21:1' () {
    return  [
      getCommonRow({n: '和值', min: 1, max: 26}),
    ]
  },

  /*
  组选包胆(不含豹子号) 只能选择一个号码，每个号码都一样对应54注 54
  */
  '581:1' () {
    return  [
      getCommonRow({n: '包胆', sl: 1, btns: []}),
    ]
  },

  /*
  和值尾数
  C(n, 1)
  */
  '576:1' () {
    return  [
      getCommonRow({n: '和值尾数'}),
    ]
  },
  /*
  特殊号
  C(n, 1)
  */
  '577:1' () {
    return  [
      getCommonRow({n: '特殊号', btns: [], vs: [{s: false, n: '豹', v: '1'}, {s: false, n: '顺', v: '2'}, {s: false, n: '对', v: '3'}]}),
    ]
  },

  /* *************************************中三*********************************** */
  /* ..............中三直选............... */
  /*
  直选复式
  N1 * N2 * N3
  */
  '528:1' () {
    return  [
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
    ]
  },

  /*
  直选单式
  N
  */
  '528:0' () {
    return null
  },

  /*
  直选和值
  分别对应各个和值数字，0-27 0:1, 1:3, 2:6, 3:10, 4:15, 5:21, 6:28, 7:36, 8:45, 9:55, 10:63, 11:69, 12:73, 13:75, 14:75, 15:73, 16:69, 17:63, 18:55, 19:45, 20:36, 21:28, 22:21, 23:15, 24:10, 25:6, 26:3, 27:1
  */
  '529:1' () {
    return  [
      getCommonRow({n: '和值', min: 0, max: 27}),
    ]
  },

  /*
  直选跨度
  分别对应各个跨度数值0-9 0:10, 1:54, 2:96, 3:126, 4:144, 5:150, 6:144, 7:126, 8:96, 9:54
  */
  '579:1' () {
    return  [
      getCommonRow({n: '跨度'}),
    ]
  },

  /* ..............中三组选............... */
  /*
  组三复式
  N=选择号码个数 n>=2 C(n, 2) * 2
  */
  '530:1' () {
    return  [
      getCommonRow({n: '组三'}),
    ]
  },

  /*
  组三单式
  N=输入的号码个数 N
  */
  '530:0' () {
    return null
  },

  /*
  组六复式
  N=选择号码个数 n>=3 C(n, 3)
  */
  '531:1' () {
    return  [
      getCommonRow({n: '组六'}),
    ]
  },

  /*
  组六单式
  N=输入的号码个数 N
  */
  '531:0' () {
    return null
  },

  /*
  混合组选
  N=输入的号码个数 N
  */
  '532:0' () {
    return null
  },

  /* ..............中三其他............... */
  /*
  组选和值(不含豹子号) 分别对应各个和值数字，0-26 1:1, 2:2, 3:2, 4:4, 5:5, 6:6, 7:8, 8:10, 9:11, 10:13, 11:14, 12:14, 13:15, 14:15, 15:14, 16:14, 17:13, 18:11, 19:10, 20:8, 21:6, 22:5, 23:4, 24:2, 25:2, 26:1
  */
  '533:1' () {
    return  [
      getCommonRow({n: '和值', min: 1, max: 26}),
    ]
  },

  /*
  组选包胆(不含豹子号) 只能选择一个号码，每个号码都一样对应54注 54
  */
  '582:1' () {
    return  [
      getCommonRow({n: '包胆', sl: 1, btns: []}),
    ]
  },

  /*
  和值尾数
  C(n, 1)
  */
  '573:1' () {
    return  [
      getCommonRow({n: '和值尾数'}),
    ]
  },
  /*
  特殊号
  C(n, 1)
  */
  '574:1' () {
    return  [
      getCommonRow({n: '特殊号', btns: [], vs: [{s: false, n: '豹', v: '1'}, {s: false, n: '顺', v: '2'}, {s: false, n: '对', v: '3'}]}),
    ]
  },

  /* *************************************后三*********************************** */
  /* ..............后三直选............... */
  /*
  直选复式
  N1 * N2 * N3
  */
  '16:1' () {
    return  [
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
  },

  /*
  直选单式
  N
  */
  '16:0' () {
  },

  /*
  直选和值
  分别对应各个和值数字，0-27 0:1, 1:3, 2:6, 3:10, 4:15, 5:21, 6:28, 7:36, 8:45, 9:55, 10:63, 11:69, 12:73, 13:75, 14:75, 15:73, 16:69, 17:63, 18:55, 19:45, 20:36, 21:28, 22:21, 23:15, 24:10, 25:6, 26:3, 27:1
  */
  '17:1' () {
    return  [
      getCommonRow({n: '和值', min: 0, max: 27}),
    ]
  },

  /*
  直选跨度
  分别对应各个跨度数值0-9 0:10, 1:54, 2:96, 3:126, 4:144, 5:150, 6:144, 7:126, 8:96, 9:54
  */
  '565:1' () {
    return  [
      getCommonRow({n: '跨度'}),
    ]
  },

  /* ..............后三组选............... */
  /*
  组三复式
  N=选择号码个数 n>=2 C(n, 2) * 2
  */
  '22:1' () {
    return  [
      getCommonRow({n: '组三'}),
    ]
  },

  /*
  组三单式
  N=输入的号码个数 N
  */
  '22:0' () {
  },

  /*
  组六复式
  N=选择号码个数 n>=3 C(n, 3)
  */
  '23:1' () {
    return  [
      getCommonRow({n: '组六'}),
    ]
  },

  /*
  组六单式
  N=输入的号码个数 N
  */
  '23:0' () {
  },

  /*
  混合组选
  N=输入的号码个数 N
  */
  '24:0' () {
  },

  /* ..............后三其他............... */
  /*
  组选和值(不含豹子号) 分别对应各个和值数字，0-26 1:1, 2:2, 3:2, 4:4, 5:5, 6:6, 7:8, 8:10, 9:11, 10:13, 11:14, 12:14, 13:15, 14:15, 15:14, 16:14, 17:13, 18:11, 19:10, 20:8, 21:6, 22:5, 23:4, 24:2, 25:2, 26:1
  */
  '25:1' () {
    return  [
      getCommonRow({n: '和值', min: 1, max: 26}),
    ]
  },

  /*
  组选包胆(不含豹子号) 只能选择一个号码，每个号码都一样对应54注 54
  */
  '580:1' () {
    return  [
      getCommonRow({n: '包胆', sl: 1, btns: []}),
    ]
  },

  /*
  和值尾数
  C(n, 1)
  */
  '562:1' () {
    return  [
      getCommonRow({n: '和值尾数'}),
    ]
  },
  /*
  特殊号
  C(n, 1)
  */
  '564:1' () {
    return  [
      getCommonRow({n: '特殊号', btns: [], vs: [{s: false, n: '豹', v: '1'}, {s: false, n: '顺', v: '2'}, {s: false, n: '对', v: '3'}]}),
    ]
  },

  /* *************************************二星*********************************** */
  /* ..............前二直选............... */
  /*
  直选复式
  N1万位，N2千位 N1 * N2
  */
  '28:1' () {
    return  [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
    ]
  },

  /*
  直选单式
  输入注数
  N
  */
  '28:0' () {
  },

  /*
  直选跨度
  对应跨度值0-9
  0:10, 1:18, 2:16, 3:14, 4:12, 5:10, 6:8, 7:6, 8:4, 9:2
  */
  '900:1' () {
    return  [
      getCommonRow({n: '跨度'}),
    ]
  },

  /* ..............前二组选............... */
  /*
  组选复式
  n>=2
  C(n, 2)
  */
  '30:1' () {
    return  [
      getCommonRow({n: '组选'}),
    ]
  },

  /*
  组选单式
  N
  */
  '30:0' () {
  },

  /*
  组选包胆
  只能选择一个号码，每个号码都一样对应9注
  9
  */
  '901:1' () {
    return  [
      getCommonRow({n: '包胆', sl: 1, btns: []}),
    ]
  },

  /* ..............后二直选............... */
  /*
  直选复式
  同前二
  */
  '29:1' () {
    return  [
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
  },

  /*
  直选单式
  同前二
  N
  */
  '29:0' () {
  },

  /*
  直选跨度
  同前二
  */
  '895:1' () {
    return  [
      getCommonRow({n: '跨度'}),
    ]
  },

  /* ..............后二组选............... */
  /*
  组选复式
  同前二
  */
  '31:1' () {
    return  [
      getCommonRow({n: '组选'}),
    ]
  },

  /*
  组选单式
  同前二
  */
  '31:0' () {
  },

  /*
  组选包胆
  同前二
  */
  '897:1' () {
    return  [
      getCommonRow({n: '包胆', sl: 1, btns: []}),
    ]
  },

  /* *************************************一星*********************************** */
  /* ..............定位胆............... */
  /*
  定位胆
  C(n1, 1)+C(n2, 1)+C(n3, 1)+C(n4, 1)+C(n5, 1)
  */
  '1199:1' () {
    let x = [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
    x.fnbtns = true
    return x
  },

  /* *************************************不定位*********************************** */
  /* ..............三星............... */
  /*
  前三一码
  C(n, 1)
  */
  '540:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  前三二码
  n>=2
  C(n, 2)
  */
  '541:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  中三一码
  C(n, 1)
  */
  '538:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  中三二码
  n>=2
  C(n, 2)
  */
  '539:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  后三一码
  C(n, 1)
  */
  '26:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  后三二码
  n>=2
  C(n, 2)
  */
  '27:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /* ..............四星............... */
  /*
  前四一码
  C(n, 1)
  */
  '1127:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  前四二码
  n>=2
  C(n, 2)
  */
  '1128:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  后四一码
  C(n, 1)
  */
  '584:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  后四二码
  n>=2
  C(n, 2)
  */
  '586:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /* ..............五星............... */
  /*
  五星二码
  n>=2
  C(n, 2)
  */
  '588:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /*
  五星三码
  n>=3
  C(n, 3)
  */
  '590:1' () {
    return  [
      getCommonRow({n: '不定位'}),
    ]
  },

  /* *************************************任选*********************************** */
  /* ..............任二............... */
  /*
  直选复式
  N1万，N2千，N3百，N4十，N5个 n>=1
  "N1 * N2 + N1 * N3 + N1 * N4 + N1 * N5 + N2 * N3 + N2 * N4 + N2 * N5 + N3 * N4 + N3 * N5 + N4 * N5h或者
  C(选择有号码的位置, 2), 再对这些位置上的号码个数相乘"
  */
  '410:1' () {
    return [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
  },

  /*
  直选单式
  N录入的号码个数，p位置选择的个数 C(p, 2) * N
  */
  '410:0' () {
    return {ps:  [0, 4], min: 2, pi: 0}
  },

  /*
  组选复式
  p位置选择的个数，n选择的号码个数 C(p, 2) * C(n, 2)
  */
  '412:1' () {
    let x = [
      getCommonRow({n: '组选'}),
    ]
    x.ps = [0, 4]
    x.min = 2
    return  x
  },

  /*
  组选单式
  N录入的号码个数，p位置选择的个数 C(p, 2) * N
  */
  '412:0' () {
    return {ps:  [0, 4], min: 2, pi: 0}
  },

  /* ..............任三............... */
  /*
  直选复式
  N1万，N2千，N3百，N4十，N5个 n>=1
  "N1 * N2 * N3+N1 * N2 * N4+N1 * N2 * N5+N1 * N3 * N4+N1 * N3 * N5+N1 * N4 * N5+N2 * N3 * N4, +N2 * N3 * N5+N2 * N4 * N5+N3 * N4 * N5或者
  C(选择有号码的位置, 3), 再对这些位置上的号码个数相乘"
  */
  '417:1' () {
    return [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
  },

  /*
  直选单式
  N录入的号码个数，p位置选择的个数 C(p, 3) * N
  */
  '417:0' () {
    return {ps:  [2, 3, 4], min: 3, pi: 0}
  },

  /*
  组三复式
  p位置选择的个数，n选择的号码个数 "C(p, 3) * C(n, 2)错误
  C(p, 3) * C(n, 2) * 2"
  */
  '418:1' () {
    let x = [
      getCommonRow({n: '组三'}),
    ]
    x.ps = [2, 3, 4]
    x.min = 3
    return  x
  },

  /*
  组三单式
  N录入的号码个数，p位置选择的个数 C(p, 3) * N
  */
  '418:0' () {
    return {ps:  [2, 3, 4], min: 3, pi: 0}
  },

  /*
  组六复式
  p位置选择的个数，n选择的号码个数 C(p, 3) * C(n, 3)
  */
  '421:1' () {
    let x = [
      getCommonRow({n: '组六'}),
    ]
    x.ps = [2, 3, 4]
    x.min = 3
    return  x
  },
  /*
  组六单式
  N录入的号码个数，p位置选择的个数 C(p, 3) * N
  */
  '421:0' () {
    return {ps:  [2, 3, 4], min: 3, pi: 0}
  },
  /*
  混合组选
  N录入的号码个数，p位置选择的个数 C(p, 3) * N
  */
  '907:0' () {
    return {ps:  [2, 3, 4], min: 3, pi: 0}
  },

  /* ..............任四............... */
  /*
  直选复式
  N1万，N2千，N3百，N4十，N5个 n>=1
  "N1 * N2 * N3 * N4+N1 * N2 * N3 * N5+N1 * N2 * N4 * N5+N1 * N3 * N4 * N5+N2 * N3 * N4 * N5或者
  C(选择有号码的位置, 4), 再对这些位置上的号码个数相乘"
  */
  '419:1' () {
    return [
      getCommonRow({n: '万位'}),
      getCommonRow({n: '千位'}),
      getCommonRow({n: '百位'}),
      getCommonRow({n: '十位'}),
      getCommonRow({n: '个位'}),
    ]
  },

  /*
  直选单式
  N录入的号码个数，p位置选择的个数 C(p, 4) * N
  */
  '419:0' () {
    return {ps:  [1, 2, 3, 4], min: 4, pi: 0}
  },

  /*
  组选24
  p位置选择的个数，n选择的号码个数 C(psl, 4) * C(n, 4)
  */
  '909:1' () {
    let x = [
      getCommonRow({n: '组选24'}),
    ]
    x.ps = [1, 2, 3, 4]
    x.min = 4
    return  x
  },

  /*
  组选12
  p位置选择的个数，m选择的二重号号码个数，n选择的单号号码个数，h重复的号码个数
  C(psl, 4) * (C(m, 1) * C(nsl[0], 2) - C(h, 1) * C(nsl[0]-1, 1))
  */
  '910:1' () {
    let x = [
      getCommonRow({n: '二重号'}),
      getCommonRow({n: '单号'}),
    ]
    x.ps = [1, 2, 3, 4]
    x.min = 4
    return  x
  },

  /*
  组选6 p位置选择的个数，n选择的号码个数 C(psl, 4) * C(nsl[0], 2)
  */
  '911:1' () {
    let x = [
      getCommonRow({n: '二重号'}),
    ]
    x.ps = [1, 2, 3, 4]
    x.min = 4
    return  x
  },

  /*
  组选4 p位置选择的个数，n选择的号码个数，h重复的号码个数
  C(psl, 4) * (C(m, 1) * C(nsl[0], 1) - C(h, 1))
  */
  '912:1' () {
    let x = [
      getCommonRow({n: '三重号'}),
      getCommonRow({n: '单号'}),
    ]
    x.ps = [1, 2, 3, 4]
    x.min = 4
    return  x
  },

  /* *************************************趣味*********************************** */
  /* ..............大小单双............... */
  /*
  前二大小单双
  N1 * N2
  */
  '37:1' () {
    return  [
      getCommonRow({n: '万位', btns: [], vs: [{s: false, n: '大', v: '1'}, {s: false, n: '小', v: '2'}, {s: false, n: '单', v: '3'}, {s: false, n: '双', v: '4'}]}),
      getCommonRow({n: '千位', btns: [], vs: [{s: false, n: '大', v: '1'}, {s: false, n: '小', v: '2'}, {s: false, n: '单', v: '3'}, {s: false, n: '双', v: '4'}]}),
    ]
  },
  /*
  后二大小单双
  N1 * N2
  */
  '38:1' () {
    return  [
      getCommonRow({n: '十位', btns: [], vs: [{s: false, n: '大', v: '1'}, {s: false, n: '小', v: '2'}, {s: false, n: '单', v: '3'}, {s: false, n: '双', v: '4'}]}),
      getCommonRow({n: '个位', btns: [], vs: [{s: false, n: '大', v: '1'}, {s: false, n: '小', v: '2'}, {s: false, n: '单', v: '3'}, {s: false, n: '双', v: '4'}]}),
    ]
  },

  /* ..............猜遗漏............... */
  /*
  猜一
  n>=1
  C(n, 1)
  */
  '1129:1' () {
    return  [
      getCommonRow({n: '猜一'}),
    ]
  },

  /*
  猜二
  n>=2
  C(nsl[0], 2)
  */
  '1130:1' () {
    return  [
      getCommonRow({n: '猜二'}),
    ]
  },

  /*
  猜三
  n>=3
  C(nsl[0], 3)
  */
  '1131:1' () {
    return  [
      getCommonRow({n: '猜三'}),
    ]
  },

  /*
  猜四
  n>=4
  C(nsl[0], 4)
  */
  '1132:1' () {
    return  [
      getCommonRow({n: '猜四'}),
    ]
  },

  /*
  猜五
  n>=5
  C(nsl[0], 5)
  */
  '1133:1' () {
    return  [
      getCommonRow({n: '猜五'}),
    ]
  },
  /*
    龙虎和
  */
  '1200:1' () {
    let x = [
      getCommonRow({n: '龙虎和', sl: 1, btns: [], vs: [{s: false, n: '龙', v: '1'}, {s: false, n: '虎', v: '2'}, {s: false, n: '和', v: '3'}]}),
    ]
    x.ps = [0]
    x.single = true
    x.pss = [
      {s: false, v: 'w,q', n: ['万千']},
      {s: false, v: 'w,b', n: ['万百']},
      {s: false, v: 'w,s', n: ['万十']},
      {s: false, v: 'w,g', n: ['万个']},
      {s: false, v: 'q,b', n: ['千百']},
      {s: false, v: 'q,s', n: ['千十']},
      {s: false, v: 'q,g', n: ['千个']},
      {s: false, v: 'b,s', n: ['百十']},
      {s: false, v: 'b,g', n: ['百个']},
      {s: false, v: 's,g', n: ['十个']},
    ]
    return x
  },
  /*
    龙虎斗
  */
  '1202:1' () {
    let x = [
      getCommonRow({n: '龙虎斗', sl: 1, btns: [], vs: [{s: false, n: '龙', v: '1'}, {s: false, n: '虎', v: '2'}]}),
    ]
    x.ps = [0]
    x.single = true
    x.pss = [
      {s: false, v: 'w,q', n: ['万千']},
      {s: false, v: 'w,b', n: ['万百']},
      {s: false, v: 'w,s', n: ['万十']},
      {s: false, v: 'w,g', n: ['万个']},
      {s: false, v: 'q,b', n: ['千百']},
      {s: false, v: 'q,s', n: ['千十']},
      {s: false, v: 'q,g', n: ['千个']},
      {s: false, v: 'b,s', n: ['百十']},
      {s: false, v: 'b,g', n: ['百个']},
      {s: false, v: 's,g', n: ['十个']},
    ]
    return x
  },
 /*
    斗牛
  */
  '1201:1' () {
    return [
      getCommonRow({n: '斗牛', btns: [], vs: [{s: false, n: '牛一', v: '1'}, {s: false, n: '牛二', v: '2'}, {s: false, n: '牛三', v: '3'}, {s: false, n: '牛四', v: '4'}, {s: false, n: '牛五', v: '5'}, {s: false, n: '牛六', v: '6'}, {s: false, n: '牛七', v: '7'}, {s: false, n: '牛八', v: '8'}, {s: false, n: '牛九', v: '9'}, {s: false, n: '牛牛', v: '10'}, {s: false, n: '没牛', v: '11'}]}),
    ]
  }
}