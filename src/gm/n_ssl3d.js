import { N, ON, P, A, C } from './base'

export default {
  /* *************************************前三*********************************** */
  /* ..............前三直选............... */
  /*
  直选复式
  N1 * N2 * N3
  */
  '1500:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  N
  */
  '1500:0' ({value}) {
    this.func = `[N(value, 3).length, N(value, 3)]`
    return [N(value, 3).length, N(value, 3)]
  },

  /*
  直选和值
  分别对应各个和值数字，0-27 0:1, 1:3, 2:6, 3:10, 4:15, 5:21, 6:28, 7:36, 8:45, 9:55, 10:63, 11:69, 12:73, 13:75, 14:75, 15:73, 16:69, 17:63, 18:55, 19:45, 20:36, 21:28, 22:21, 23:15, 24:10, 25:6, 26:3, 27:1
  */
  '1501:1' ({ns}) {
    let NS = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 63, 69, 73, 75, 75, 73, 69, 63, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1]
    return ns[0].reduce((p, n) => {
      return (p += NS[n])
    }, 0)
  },

  /* ..............前三组选............... */
  /*
  组三复式
  N=选择号码个数 n>=2 C(n, 2) * 2
  */
  '1502:1' ({nsl}) {
    return C(nsl[0], 2) * 2
  },

  /*
  组三单式
  N=输入的号码个数 N
  */
  '1502:0' ({value}) {
    this.func = `[N(value, 3, 2).length, N(value, 3, 2)]`
    return [N(value, 3, 2).length, N(value, 3, 2)]
  },

  /*
  组六复式
  N=选择号码个数 n>=3 C(n, 3)
  */
  '1503:1' ({nsl}) {
    return C(nsl[0], 3)
  },

  /*
  组六单式
  N=输入的号码个数 N
  */
  '1503:0' ({value}) {
    this.func = `[N(value, 3, 1).length, N(value, 3, 1)]`
    return [N(value, 3, 1).length, N(value, 3, 1)]
  },

  /*
  混合组选
  N=输入的号码个数 N
  */
  '1504:0' ({value}) {
    this.func = `[ON(value, 3, 2).length, ON(value, 3, 2)]`
    return [ON(value, 3, 2).length, ON(value, 3, 2)]
  },

  /* ..............前三其他............... */
  /*
  组选和值(不含豹子号) 分别对应各个和值数字，0-26 1:1, 2:2, 3:2, 4:4, 5:5, 6:6, 7:8, 8:10, 9:11, 10:13, 11:14, 12:14, 13:15, 14:15, 15:14, 16:14, 17:13, 18:11, 19:10, 20:8, 21:6, 22:5, 23:4, 24:2, 25:2, 26:1
  */
  '1505:1' ({ns}) {
    let NS = [1, 2, 2, 4, 5, 6, 8, 10, 11, 13, 14, 14, 15, 15, 14, 14, 13, 11, 10, 8, 6, 5, 4, 2, 2, 1]
    return ns[0].reduce((p, n) => {
      return (p += NS[n - 1])
    }, 0)
  },
  /* *************************************二星*********************************** */
  /* ..............前二直选............... */
  /*
  直选复式
  N1万位，N2千位 N1 * N2
  */
  '1506:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  输入注数
  N
  */
  '1506:0' ({value}) {
    this.func = `[N(value, 2).length, N(value, 2)]`
    return [N(value, 2).length, N(value, 2)]
  },

  /* ..............前二组选............... */
  /*
  组选复式
  n>=2
  C(n, 2)
  */
  '1507:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  组选单式
  N
  */
  '1507:0' ({value}) {
    this.func = `[N(value, 2, 1).length, N(value, 2, 1)]`
    return [N(value, 2, 1).length, N(value, 2, 1)]
  },
  /* ..............后二直选............... */
  /*
  直选复式
  同前二
  */
  '1508:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  同前二
  N
  */
  '1508:0' ({value}) {
    this.func = `[N(value, 2).length, N(value, 2)]`
    return [N(value, 2).length, N(value, 2)]
  },

  /* ..............后二组选............... */
  /*
  组选复式
  同前二
  */
  '1509:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  组选单式
  同前二
  */
  '1509:0' ({value}) {
    this.func = `[N(value, 2, 1).length, N(value, 2, 1)]`
    return [N(value, 2, 1).length, N(value, 2, 1)]
  },

  /* *************************************一星*********************************** */
  /* ..............定位胆............... */
  /*
  定位胆
  C(n1, 1)+C(n2, 1)+C(n3, 1)+C(n4, 1)+C(n5, 1)
  */
  '1515:1' ({nsl}) {
    return C(nsl[1 - 1], 1) + C(nsl[2 - 1], 1) + C(nsl[3 - 1], 1) + C(nsl[4 - 1], 1) + C(nsl[5 - 1], 1)
  },

  /* *************************************不定位*********************************** */
  /* ..............三星............... */
  /*
  前三一码
  C(n, 1)
  */
  '1511:1' ({nsl}) {
    return C(nsl[0], 1)
  },

  /*
  前三二码
  n>=2
  C(n, 2)
  */
  '1512:1' ({nsl}) {
    return C(nsl[0], 2)
  },
  /* *************************************趣味*********************************** */
  /* ..............大小单双............... */
  /*
  前二大小单双
  N1 * N2
  */
  '1513:1' ({nsl}) {
    return P(nsl)
  },
  /*
  后二大小单双
  N1 * N2
  */
  '1514:1' ({nsl}) {
    return P(nsl)
  },
}