import { N, ON, P, A, C } from './base'

export default {
  /*
  所有参数集：{
    // 号码集
    ns,
    // 号码集长度集
    nsl, [4, 4]
    // 位置集
    ps,
    // 位置集长度
    psl
    // 输入值
    value
    // 重号数量 [4,5,6]
    r 3
  }
   */
  /* ===========================================================================时时彩============================================================================================== */

  /* *************************************五星*********************************** */
  /* ..............五星直选............... */
  /*
  直选复式
  N1*N2*N3*N4*N5
   */
  '377:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  N
   */
  '377:0' ({value}) {
    this.func = `[N(value, 5).length, N(value, 5)]`
    return [N(value, 5).length, N(value, 5)]
  },

  /*
  直选组合
  5*N1*N2*N3*N4*N5
   */
  '380:1' ({nsl}) {
    return 5 * this['377:1']({nsl})
  },

  /* ..............五星组选............... */
  /*
  组选120 WXZUS  12 14
  C(n,5)
   */
  '543:1' ({nsl}) {
    return C(nsl[0], 5)
  },

  /*
  组选60
  C(m,1)*C(n,3)-C(h,1)*C(n-1,2)
  m二重号选择的个数，n单号选择的个数，h二重号和单号重复号码的个数 m>=1,n>=3
   */
  '544:1' ({nsl, r}) {
    return C(nsl[0], 1) * C(nsl[1], 3) - C(r, 1) * C(nsl[1] - 1, 2)
  },

  /*
  组选30
  C(m,2)*C(n,1)-C(h,2)*C(2,1)-C(h,1)*C(m-h,1)
  m二重号选择的个数，n单号选择的个数，h二重号和单号重复号码的个数m>=2, n>=1
   */
  '1110:1' ({nsl, r}) {
    return C(nsl[0], 2) * C(nsl[1], 1) - C(r, 2) * C(2, 1) - C(r, 1) * C(nsl[0] - r, 1)
  },

  /*
  组选20
  C(m,1)*C(n,2)-C(h,1)*C(n-1,1)
  m三重号选择的个数，n单号选择的个数，h三重号和单号重复号码的个数m>=1,n>=2
   */
  '546:1' ({nsl, r}) {
    return C(nsl[0], 1) * C(nsl[1], 2) - C(r, 1) * C(nsl[1] - 1, 1)
  },

  /*
  组选10
  C(m,1)*C(n,1)-C(h,1)
  m三重号选择的个数，n二重号选择的个数，h三重号和二重号重复号码的个数m>=1,n>=1
   */
  '547:1' ({nsl, r}) {
    return C(nsl[0], 1) * C(nsl[1], 1) - C(r, 1)
  },

  /*
  组选5
  C(m,1)*C(n,1)-C(h,1)
  m四重号选择的个数，n单号选择的个数，h四重号和单号重复号码的个数m>=1,n>=1
   */
  '548:1' ({nsl, r}) {
    return C(nsl[0], 1) * C(nsl[1], 1) - C(r, 1)
  },

  /* ..............五星特殊............... */

  /*
  五星特殊  一帆风顺  C(n,1)  n选择的号码个数 n>=1
  好事成双  C(n,1)  n选择的号码个数n>=1
  三星报喜  C(n,1)  n选择的号码个数n>=1
  四季发财  C(n,1)  n选择的号码个数n>=1
   */
  '550:1' ({nsl}) {
    return C(nsl[0], 1)
  },
  /*
  好事成双  C(n,1)  n选择的号码个数n>=1
   */
  '551:1' ({nsl}) {
    return this['550:1']({nsl})
  },
   /*
  三星报喜  C(n,1)  n选择的号码个数n>=1
   */
  '552:1' ({nsl}) {
    return this['550:1']({nsl})
  },
  /*
  四季发财  C(n,1)  n选择的号码个数n>=1
   */
  '553:1' ({nsl}) {
    return this['550:1']({nsl})
  },

  /* *************************************四星*********************************** */
  /* ..............前四直选............... */
  /*
  直选复式
  N1*N2*N3*N4 N1千，N2百，N3十，N4个
   */
  '1121:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  N N=输入的号码个数
   */
  '1121:0' ({value}) {
    this.func = `[N(value, 4).length, N(value, 4)]`
    return [N(value, 4).length, N(value, 4)]
  },

  /*
  直选组合
  (N1*N2*N3*N4)*4 N1千，N2百，N3十，N4个n>=1
  */
  '1122:1' ({nsl}) {
    return 4 * P(nsl)
  },

  /* ..............前四组选............... */
  /*
  组选24
  C(n,4)  n选择的号码个数 n>=4
  */
  '1123:1' ({nsl}) {
    return C(nsl[0], 4)
  },

  /*
  组选12
  C(m,1)*C(n,2)-C(h,1)*C(n-1,1) m二重号选择的个数，n单号选择的个数，h二重号和单号重复号码的个数 m>=1,n>=2
  */
  '1124:1' ({nsl, r}) {
    return C(nsl[0], 1) * C(nsl[1], 2) - C(r, 1) * C(nsl[1] - 1, 1)
  },

  /*
  组选6
  C(n,2)  n>=2
  */
  '1125:1' ({nsl}) {
    return C(nsl[0], 2)
  },

   /*
  组选4
  C(m,1)*C(n,1)-C(h,1)  m三重号选择的个数，n单号选择的个数，h三重号和单号重复号码的个数m>=1,n>=1
  */
  '1126:1' ({nsl, r}) {
    return C(nsl[0], 1) * C(nsl[1], 1) - C(r, 1)
  },

  /* ..............后四直选............... */
  /*
  直选复式
  同前四 同前四
  */
  '382:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  同前四 同前四
  */
  '382:0' ({value}) {
    this.func = `[N(value, 4).length, N(value, 4)]`
    return [N(value, 4).length, N(value, 4)]
  },

  /*
  直选组合
  同前四 同前四
  */
  '384:1' ({nsl}) {
    return 4 * P(nsl)
  },

  /* ..............后四组选............... */
  /*
  组选24
  同前四 同前四
  */
  '555:1' ({nsl}) {
    return C(nsl[0], 4)
  },

  /*
  组选12
  同前四 同前四
  */
  '556:1' ({nsl, r}) {
    return C(nsl[0], 1) * C(nsl[1], 2) - C(r, 1) * C(nsl[1] - 1, 1)
  },

  /*
  组选6
  同前四 同前四
  */
  '557:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  组选4
  同前四 同前四
  */
  '558:1' ({nsl, r}) {
    return C(nsl[0], 1) * C(nsl[1], 1) - C(r, 1)
  },

  /* *************************************前三*********************************** */
  /* ..............前三直选............... */
  /*
  直选复式
  N1 * N2 * N3
  */
  '14:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  N
  */
  '14:0' ({value}) {
    this.func = `[N(value, 3).length, N(value, 3)]`
    return [N(value, 3).length, N(value, 3)]
  },

  /*
  直选和值
  分别对应各个和值数字，0-27 0:1, 1:3, 2:6, 3:10, 4:15, 5:21, 6:28, 7:36, 8:45, 9:55, 10:63, 11:69, 12:73, 13:75, 14:75, 15:73, 16:69, 17:63, 18:55, 19:45, 20:36, 21:28, 22:21, 23:15, 24:10, 25:6, 26:3, 27:1
  */
  '15:1' ({ns}) {
    let NS = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 63, 69, 73, 75, 75, 73, 69, 63, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1]
    return ns[0].reduce((p, n) => {
      return (p += NS[n])
    }, 0)
  },

  /*
  直选跨度
  分别对应各个跨度数值0-9 0:10, 1:54, 2:96, 3:126, 4:144, 5:150, 6:144, 7:126, 8:96, 9:54
  */
  '578:1' ({ns}) {
    let NS = [10, 54, 96, 126, 144, 150, 144, 126, 96, 54]
    return ns[0].reduce((p, n) => {
      return (p += NS[n])
    }, 0)
  },

  /* ..............前三组选............... */
  /*
  组三复式
  N=选择号码个数 n>=2 C(n, 2) * 2
  */
  '18:1' ({nsl}) {
    return C(nsl[0], 2) * 2
  },

  /*
  组三单式
  N=输入的号码个数 N
  */
  '18:0' ({value}) {
    this.func = `[N(value, 3, 2).length, N(value, 3, 2)]`
    return [N(value, 3, 2).length, N(value, 3, 2)]
  },

  /*
  组六复式
  N=选择号码个数 n>=3 C(n, 3)
  */
  '19:1' ({nsl}) {
    return C(nsl[0], 3)
  },

  /*
  组六单式
  N=输入的号码个数 N
  */
  '19:0' ({value}) {
    this.func = `[N(value, 3, 1).length, N(value, 3, 1)]`
    return [N(value, 3, 1).length, N(value, 3, 1)]
  },

  /*
  混合组选
  N=输入的号码个数 N
  */
  '20:0' ({value}) {
    this.func = `[ON(value, 3, 2).length, ON(value, 3, 2)]`
    return [ON(value, 3, 2).length, ON(value, 3, 2)]
  },

  /* ..............前三其他............... */
  /*
  组选和值(不含豹子号) 分别对应各个和值数字，0-26 1:1, 2:2, 3:2, 4:4, 5:5, 6:6, 7:8, 8:10, 9:11, 10:13, 11:14, 12:14, 13:15, 14:15, 15:14, 16:14, 17:13, 18:11, 19:10, 20:8, 21:6, 22:5, 23:4, 24:2, 25:2, 26:1
  */
  '21:1' ({ns}) {
    let NS = [1, 2, 2, 4, 5, 6, 8, 10, 11, 13, 14, 14, 15, 15, 14, 14, 13, 11, 10, 8, 6, 5, 4, 2, 2, 1]
    return ns[0].reduce((p, n) => {
      return (p += NS[n - 1])
    }, 0)
  },

  /*
  组选包胆(不含豹子号) 只能选择一个号码，每个号码都一样对应54注 54
  */
  '581:1' ({nsl}) {
    return 54 * nsl[0]
  },

  /*
  和值尾数
  C(n, 1)
  */
  '576:1' ({nsl}) {
    return C(nsl[0], 1)
  },
  /*
  特殊号
  C(n, 1)
  */
  '577:1' ({nsl}) {
    return C(nsl[0], 1)
  },

  /* *************************************中三*********************************** */
  /* ..............中三直选............... */
  /*
  直选复式
  N1 * N2 * N3
  */
  '528:1' ({nsl}) {
    return this['14:1']({nsl})
  },

  /*
  直选单式
  N
  */
  '528:0' ({value}) {
    return this['14:0']({value})
  },

  /*
  直选和值
  分别对应各个和值数字，0-27 0:1, 1:3, 2:6, 3:10, 4:15, 5:21, 6:28, 7:36, 8:45, 9:55, 10:63, 11:69, 12:73, 13:75, 14:75, 15:73, 16:69, 17:63, 18:55, 19:45, 20:36, 21:28, 22:21, 23:15, 24:10, 25:6, 26:3, 27:1
  */
  '529:1' ({ns}) {
    return this['15:1']({ns})
  },

  /*
  直选跨度
  分别对应各个跨度数值0-9 0:10, 1:54, 2:96, 3:126, 4:144, 5:150, 6:144, 7:126, 8:96, 9:54
  */
  '579:1' ({ns}) {
    return this['578:1']({ns})
  },

  /* ..............中三组选............... */
  /*
  组三复式
  N=选择号码个数 n>=2 C(n, 2) * 2
  */
  '530:1' ({nsl}) {
    return this['18:1']({nsl})
  },

  /*
  组三单式
  N=输入的号码个数 N
  */
  '530:0' ({value}) {
    return this['18:0']({value})
  },

  /*
  组六复式
  N=选择号码个数 n>=3 C(n, 3)
  */
  '531:1' ({nsl}) {
    return this['19:1']({nsl})
  },

  /*
  组六单式
  N=输入的号码个数 N
  */
  '531:0' ({value}) {
    return this['19:0']({value})
  },

  /*
  混合组选
  N=输入的号码个数 N
  */
  '532:0' ({value}) {
    return this['20:0']({value})
  },

  /* ..............中三其他............... */
  /*
  组选和值(不含豹子号) 分别对应各个和值数字，0-26 1:1, 2:2, 3:2, 4:4, 5:5, 6:6, 7:8, 8:10, 9:11, 10:13, 11:14, 12:14, 13:15, 14:15, 15:14, 16:14, 17:13, 18:11, 19:10, 20:8, 21:6, 22:5, 23:4, 24:2, 25:2, 26:1
  */
  '533:1' ({ns}) {
    return this['21:1']({ns})
  },

  /*
  组选包胆(不含豹子号) 只能选择一个号码，每个号码都一样对应54注 54
  */
  '582:1' ({nsl}) {
    return this['581:1']({nsl})
  },

  /*
  和值尾数
  C(n, 1)
  */
  '573:1' ({nsl}) {
    return this['576:1']({nsl})
  },
  /*
  特殊号
  C(n, 1)
  */
  '574:1' ({nsl}) {
    return this['577:1']({nsl})
  },

  /* *************************************后三*********************************** */
  /* ..............后三直选............... */
  /*
  直选复式
  N1 * N2 * N3
  */
  '16:1' ({nsl}) {
    return this['14:1']({nsl})
  },

  /*
  直选单式
  N
  */
  '16:0' ({value}) {
    return this['14:0']({value})
  },

  /*
  直选和值
  分别对应各个和值数字，0-27 0:1, 1:3, 2:6, 3:10, 4:15, 5:21, 6:28, 7:36, 8:45, 9:55, 10:63, 11:69, 12:73, 13:75, 14:75, 15:73, 16:69, 17:63, 18:55, 19:45, 20:36, 21:28, 22:21, 23:15, 24:10, 25:6, 26:3, 27:1
  */
  '17:1' ({ns}) {
    return this['15:1']({ns})
  },

  /*
  直选跨度
  分别对应各个跨度数值0-9 0:10, 1:54, 2:96, 3:126, 4:144, 5:150, 6:144, 7:126, 8:96, 9:54
  */
  '565:1' ({ns}) {
    return this['578:1']({ns})
  },

  /* ..............后三组选............... */
  /*
  组三复式
  N=选择号码个数 n>=2 C(n, 2) * 2
  */
  '22:1' ({nsl}) {
    return this['18:1']({nsl})
  },

  /*
  组三单式
  N=输入的号码个数 N
  */
  '22:0' ({value}) {
    return this['18:0']({value})
  },

  /*
  组六复式
  N=选择号码个数 n>=3 C(n, 3)
  */
  '23:1' ({nsl}) {
    return this['19:1']({nsl})
  },

  /*
  组六单式
  N=输入的号码个数 N
  */
  '23:0' ({value}) {
    return this['19:0']({value})
  },

  /*
  混合组选
  N=输入的号码个数 N
  */
  '24:0' ({value}) {
    return this['20:0']({value})
  },

  /* ..............后三其他............... */
  /*
  组选和值(不含豹子号) 分别对应各个和值数字，0-26 1:1, 2:2, 3:2, 4:4, 5:5, 6:6, 7:8, 8:10, 9:11, 10:13, 11:14, 12:14, 13:15, 14:15, 15:14, 16:14, 17:13, 18:11, 19:10, 20:8, 21:6, 22:5, 23:4, 24:2, 25:2, 26:1
  */
  '25:1' ({ns}) {
    return this['21:1']({ns})
  },

  /*
  组选包胆(不含豹子号) 只能选择一个号码，每个号码都一样对应54注 54
  */
  '580:1' ({nsl}) {
    return this['581:1']({nsl})
  },

  /*
  和值尾数
  C(n, 1)
  */
  '562:1' ({nsl}) {
    return this['576:1']({nsl})
  },
  /*
  特殊号
  C(n, 1)
  */
  '564:1' ({nsl}) {
    return this['577:1']({nsl})
  },

  /* *************************************二星*********************************** */
  /* ..............前二直选............... */
  /*
  直选复式
  N1万位，N2千位 N1 * N2
  */
  '28:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  输入注数
  N
  */
  '28:0' ({value}) {
    this.func = `[N(value, 2).length, N(value, 2)]`
    return [N(value, 2).length, N(value, 2)]
  },

  /*
  直选跨度
  对应跨度值0-9
  0:10, 1:18, 2:16, 3:14, 4:12, 5:10, 6:8, 7:6, 8:4, 9:2
  */
  '900:1' ({ns}) {
    let NS = [10, 18, 16, 14, 12, 10, 8, 6, 4, 2]
    return ns[0].reduce((p, n) => {
      return (p += NS[n])
    }, 0)
  },

  /* ..............前二组选............... */
  /*
  组选复式
  n>=2
  C(n, 2)
  */
  '30:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  组选单式
  N
  */
  '30:0' ({value}) {
    this.func = `[N(value, 2, 1).length, N(value, 2, 1)]`
    return [N(value, 2, 1).length, N(value, 2, 1)]
  },

  /*
  组选包胆
  只能选择一个号码，每个号码都一样对应9注
  9
  */
  '901:1' ({nsl}) {
    return 9 * nsl[0]
  },

  /* ..............后二直选............... */
  /*
  直选复式
  同前二
  */
  '29:1' ({nsl}) {
    return P(nsl)
  },

  /*
  直选单式
  同前二
  N
  */
  '29:0' ({value}) {
    this.func = `[N(value, 2).length, N(value, 2)]`
    return [N(value, 2).length, N(value, 2)]
  },

  /*
  直选跨度
  同前二
  */
  '895:1' ({ns}) {
    let NS = [10, 18, 16, 14, 12, 10, 8, 6, 4, 2]
    return ns[0].reduce((p, n) => {
      return (p += NS[n])
    }, 0)
  },

  /* ..............后二组选............... */
  /*
  组选复式
  同前二
  */
  '31:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  组选单式
  同前二
  */
  '31:0' ({value}) {
    this.func = `[N(value, 2, 1).length, N(value, 2, 1)]`
    return [N(value, 2, 1).length, N(value, 2, 1)]
  },

  /*
  组选包胆
  同前二
  */
  '897:1' ({nsl}) {
    return 9 * nsl[0]
  },

  /* *************************************一星*********************************** */
  /* ..............定位胆............... */
  /*
  定位胆
  C(n1, 1)+C(n2, 1)+C(n3, 1)+C(n4, 1)+C(n5, 1)
  */
  '1199:1' ({nsl}) {
    return C(nsl[1 - 1], 1) + C(nsl[2 - 1], 1) + C(nsl[3 - 1], 1) + C(nsl[4 - 1], 1) + C(nsl[5 - 1], 1)
  },

  /* *************************************不定位*********************************** */
  /* ..............三星............... */
  /*
  前三一码
  C(n, 1)
  */
  '540:1' ({nsl}) {
    return C(nsl[0], 1)
  },

  /*
  前三二码
  n>=2
  C(n, 2)
  */
  '541:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  中三一码
  C(n, 1)
  */
  '538:1' ({nsl}) {
    return C(nsl[0], 1)
  },

  /*
  中三二码
  n>=2
  C(n, 2)
  */
  '539:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  后三一码
  C(n, 1)
  */
  '26:1' ({nsl}) {
    return C(nsl[0], 1)
  },

  /*
  后三二码
  n>=2
  C(n, 2)
  */
  '27:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /* ..............四星............... */
  /*
  前四一码
  C(n, 1)
  */
  '1127:1' ({nsl}) {
    return C(nsl[0], 1)
  },

  /*
  前四二码
  n>=2
  C(n, 2)
  */
  '1128:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  后四一码
  C(n, 1)
  */
  '584:1' ({nsl}) {
    return C(nsl[0], 1)
  },

  /*
  后四二码
  n>=2
  C(n, 2)
  */
  '586:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /* ..............五星............... */
  /*
  五星二码
  n>=2
  C(n, 2)
  */
  '588:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  五星三码
  n>=3
  C(n, 3)
  */
  '590:1' ({nsl}) {
    return C(nsl[0], 3)
  },

  /* *************************************任选*********************************** */
  /* ..............任二............... */
  /*
  直选复式
  N1万，N2千，N3百，N4十，N5个 n>=1
  "N1 * N2 + N1 * N3 + N1 * N4 + N1 * N5 + N2 * N3 + N2 * N4 + N2 * N5 + N3 * N4 + N3 * N5 + N4 * N5h或者
  C(选择有号码的位置, 2), 再对这些位置上的号码个数相乘"
  */
  '410:1' ({nsl}) {
    let N1 = nsl[0]
    let N2 = nsl[1]
    let N3 = nsl[2]
    let N4 = nsl[3]
    let N5 = nsl[4]
    return N1 * N2 + N1 * N3 + N1 * N4 + N1 * N5 + N2 * N3 + N2 * N4 + N2 * N5 + N3 * N4 + N3 * N5 + N4 * N5
  },

  /*
  直选单式
  N录入的号码个数，p位置选择的个数 C(p, 2) * N
  */
  '410:0' ({value, psl}) {
    this.func = `[C(psl, 2) * N(value, 2).length, N(value, 2)]`
    return [C(psl, 2) * N(value, 2).length, N(value, 2)]
  },

  /*
  组选复式
  p位置选择的个数，n选择的号码个数 C(p, 2) * C(n, 2)
  */
  '412:1' ({nsl, psl}) {
    return C(psl, 2) * C(nsl[0], 2)
  },

  /*
  组选单式
  N录入的号码个数，p位置选择的个数 C(p, 2) * N
  */
  '412:0' ({psl, value}) {
    this.func = `[C(psl, 2) * N(value, 2).length, N(value, 2)]`
    return [C(psl, 2) * N(value, 2).length, N(value, 2)]
  },

  /* ..............任三............... */
  /*
  直选复式
  N1万，N2千，N3百，N4十，N5个 n>=1
  "N1 * N2 * N3+N1 * N2 * N4+N1 * N2 * N5+N1 * N3 * N4+N1 * N3 * N5+N1 * N4 * N5+N2 * N3 * N4, +N2 * N3 * N5+N2 * N4 * N5+N3 * N4 * N5或者
  C(选择有号码的位置, 3), 再对这些位置上的号码个数相乘"
  */
  '417:1' ({nsl}) {
    let N1 = nsl[0]
    let N2 = nsl[1]
    let N3 = nsl[2]
    let N4 = nsl[3]
    let N5 = nsl[4]
    return N1 * N2 * N3 + N1 * N2 * N4 + N1 * N2 * N5 + N1 * N3 * N4 + N1 * N3 * N5 + N1 * N4 * N5 + N2 * N3 * N4 + N2 * N3 * N5 + N2 * N4 * N5 + N3 * N4 * N5
  },

  /*
  直选单式
  N录入的号码个数，p位置选择的个数 C(p, 3) * N
  */
  '417:0' ({psl, value}) {
    this.func = `[C(psl, 3) * N(value, 3).length, N(value, 3)]`
    return [C(psl, 3) * N(value, 3).length, N(value, 3)]
  },

  /*
  组三复式
  p位置选择的个数，n选择的号码个数 "C(p, 3) * C(n, 2)错误
  C(p, 3) * C(n, 2) * 2"
  */
  '418:1' ({nsl, psl}) {
    return 2 * C(psl, 3) * C(nsl[0], 2)
  },

  /*
  组三单式
  N录入的号码个数，p位置选择的个数 C(p, 3) * N
  */
  '418:0' ({psl, value}) {
    this.func = `[C(psl, 3) * N(value, 3, 2).length, N(value, 3, 2)]`
    return [C(psl, 3) * N(value, 3, 2).length, N(value, 3, 2)]
  },

  /*
  组六复式
  p位置选择的个数，n选择的号码个数 C(p, 3) * C(n, 3)
  */
  '421:1' ({nsl, psl}) {
    return C(psl, 3) * C(nsl[0], 3)
  },
  /*
  组六单式
  N录入的号码个数，p位置选择的个数 C(p, 3) * N
  */
  '421:0' ({psl, value}) {
    this.func = `[C(psl, 3) * N(value, 3, 1).length, N(value, 3, 1)]`
    return [C(psl, 3) * N(value, 3, 1).length, N(value, 3, 1)]
  },
  /*
  混合组选
  N录入的号码个数，p位置选择的个数 C(p, 3) * N
  */
  '907:0' ({psl, value}) {
    this.func = `[C(psl, 3) * ON(value, 3, 2).length, ON(value, 3, 2)]`
    return [C(psl, 3) * ON(value, 3, 2).length, ON(value, 3, 2)]
  },

  /* ..............任四............... */
  /*
  直选复式
  N1万，N2千，N3百，N4十，N5个 n>=1
  "N1 * N2 * N3 * N4+N1 * N2 * N3 * N5+N1 * N2 * N4 * N5+N1 * N3 * N4 * N5+N2 * N3 * N4 * N5或者
  C(选择有号码的位置, 4), 再对这些位置上的号码个数相乘"
  */
  '419:1' ({nsl}) {
    let N1 = nsl[0]
    let N2 = nsl[1]
    let N3 = nsl[2]
    let N4 = nsl[3]
    let N5 = nsl[4]
    return N1 * N2 * N3 * N4 + N1 * N2 * N3 * N5 + N1 * N2 * N4 * N5 + N1 * N3 * N4 * N5 + N2 * N3 * N4 * N5
  },

  /*
  直选单式
  N录入的号码个数，p位置选择的个数 C(p, 4) * N
  */
  '419:0' ({psl, value}) {
    this.func = `[C(psl, 4) * N(value, 4).length, N(value, 4)]`
    return [C(psl, 4) * N(value, 4).length, N(value, 4)]
  },

  /*
  组选24
  p位置选择的个数，n选择的号码个数 C(psl, 4) * C(n, 4)
  */
  '909:1' ({nsl, psl}) {
    return C(psl, 4) * C(nsl[0], 4)
  },

  /*
  组选12
  p位置选择的个数，m选择的二重号号码个数，n选择的单号号码个数，h重复的号码个数
  C(psl, 4) * (C(m, 1) * C(nsl[0], 2) - C(h, 1) * C(nsl[0]-1, 1))
  */
  '910:1' ({nsl, psl, r}) {
    return C(psl, 4) * (C(nsl[0], 1) * C(nsl[1], 2) - C(r, 1) * C(nsl[1] - 1, 1))
  },

  /*
  组选6 p位置选择的个数，n选择的号码个数 C(psl, 4) * C(nsl[0], 2)
  */
  '911:1' ({nsl, psl}) {
    return C(psl, 4) * C(nsl[0], 2)
  },

  /*
  组选4 p位置选择的个数，n选择的号码个数，h重复的号码个数
  C(psl, 4) * (C(m, 1) * C(nsl[0], 1) - C(h, 1))
  */
  '912:1' ({nsl, psl, r}) {
    return C(psl, 4) * (C(nsl[0], 1) * C(nsl[1], 1) - C(r, 1))
  },

  /* *************************************趣味*********************************** */
  /* ..............大小单双............... */
  /*
  前二大小单双
  N1 * N2
  */
  '37:1' ({nsl}) {
    return P(nsl)
  },
  /*
  后二大小单双
  N1 * N2
  */
  '38:1' ({nsl}) {
    return P(nsl)
  },

  /* ..............猜遗漏............... */
  /*
  猜一
  n>=1
  C(n, 1)
  */
  '1129:1' ({nsl}) {
    return C(nsl[0], 1)
  },

  /*
  猜二
  n>=2
  C(nsl[0], 2)
  */
  '1130:1' ({nsl}) {
    return C(nsl[0], 2)
  },

  /*
  猜三
  n>=3
  C(nsl[0], 3)
  */
  '1131:1' ({nsl}) {
    return C(nsl[0], 3)
  },

  /*
  猜四
  n>=4
  C(nsl[0], 4)
  */
  '1132:1' ({nsl}) {
    return C(nsl[0], 4)
  },

  /*
  猜五
  n>=5
  C(nsl[0], 5)
  */
  '1133:1' ({nsl}) {
    return C(nsl[0], 5)
  },
  /*
    龙虎
  */
  '1200:1' ({nsl, psl}) {
    return C(nsl[0], 1)
  },
  /*
    龙虎斗
  */
  '1202:1' ({nsl, psl}) {
    return C(nsl[0], 1)
  },
 /*
    斗牛
  */
  '1201:1' ({nsl}) {
    return C(nsl[0], 1)
  }
}